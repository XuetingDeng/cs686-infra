name: Nightly Deployment

on:
  schedule:
    - cron: '0 8 * * *'  # CA 0am
  workflow_dispatch:  # manually trigger

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Deploy Temporary EC2 Instance
        id: deploy
        run: |
          # Deploy an EC2 instance using AWS CLI
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-05b10e08d247fb927 --count 1 --instance-type t2.micro --key-name qa-machine-key --security-group-ids sg-06b347ae2c3e64278 --subnet-id subnet-015f9419057906f7e --query 'Instances[0].InstanceId' --output text)
          echo "Instance ID: $INSTANCE_ID"
          echo "::set-output name=instance_id::$INSTANCE_ID"

      - name: Get Public IP of EC2 Instance
        run: |
          # Get the public IP address of the newly created EC2 instance
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${{ steps.deploy.outputs.instance_id }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "EC2 Public IP: $PUBLIC_IP"
          echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
      
      - name: Wait for EC2 Status Checks
        run: |
          echo "Waiting for EC2 status checks to complete..."
          aws ec2 wait instance-status-ok --instance-ids ${{ steps.deploy.outputs.instance_id }}
          echo "EC2 instance is ready."

      - name: SSH set up and connect to temp EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
          echo "SSH key setup complete."
      
      - name: Set up Environment and Deploy Application
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ env.EC2_PUBLIC_IP }} << 'EOF'
            set -e  # Exit on error

            echo "SSH connection successful!"
            echo "Updating system packages..."
            sudo yum update -y
            sudo yum install -y docker git
            sudo yum install -y libxcrypt-compat
            sudo systemctl start docker

            echo "Adding ec2-user to Docker group..."
            sudo usermod -aG docker $USER
            newgrp docker

            echo "Install JQ for JSON processing"
            sudo apt-get install -y jq

            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version || echo "Docker Compose installation failed!"

            echo "Cloning repository..."
            git clone https://github.com/XuetingDeng/crud-react-node-mySQL-go.git || (cd crud-react-node-mySQL-go && git pull)
            cd crud-react-node-mySQL-go

            docker-compose up -d
          EOF

      - name: Smoke Test
        run: |
          sleep 15  # Wait 15s for the services to be ready
          echo "üìå Fetch the books data from the API and check if there are exactly 3 books..."
          DATA=$(curl -s http://$EC2_PUBLIC_IP:8800/books)
          COUNT=$(echo $DATA | jq '. | length')
          if [ "$COUNT" -eq 3 ]; then
            echo "‚úÖ Smoke Test - backend & db passed: Correct number of books returned (3 books)."
          else
            echo "‚ùå Smoke Test - backend & db test failed: Incorrect number of books returned."
            echo "Received data: $DATA"
            exit 1  # This will fail the workflow if the test does not pass
          fi

          echo "üìå Smoke Test - frontend test: should return frontend code"
          curl http://$EC2_PUBLIC_IP:5173

          echo "Integration Test: Creating a new book..."
          POST_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/json" -d '{"title":"Integration Test Book","description":"A book created during integration tests.","price":15.99,"cover":"http://example.com/cover.jpg"}' http://$EC2_PUBLIC_IP:8800/books)
          if [ "$POST_RESPONSE" -eq 200 ] || [ "$POST_RESPONSE" -eq 201 ]; then
            echo "‚úÖ Successfully created a new book. Response code: $POST_RESPONSE"
          else
            echo "‚ùå Failed to create a book. Response code: $POST_RESPONSE"
            exit 1
          fi

          echo "Verify the new book is added..."
          DATA=$(curl -s http://$EC2_PUBLIC_IP:8800/books)
          COUNT=$(echo $DATA | jq '. | length')
          if [ "$COUNT" -eq 4 ]; then
            echo "‚úÖ Integration Test passed: Correct number of books returned (4 books)."
          else
            echo "‚ùå Integration Test failed: Incorrect number of books returned."
            echo "Received data: $DATA"
            exit 1
          fi

      - name: Terminate temporary EC2 instance
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids ${{ steps.deploy.outputs.instance_id }}
          echo "Temporary EC2 terminated"

      - name: Get AWS Account ID
        id: aws-account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "AWS_ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          echo "AWS_REGION=us-east-1" >> $GITHUB_ENV

      - name: Checkout Source Repo
        # if Smoke Test success
        if: success()
        uses: actions/checkout@v2
        with:
          repository: XuetingDeng/crud-react-node-mySQL-go
          path: source
      
      - name: Build Docker Image (Backend)
        if: success()
        run: |
          cd source
          docker build -t cs686-midterm-backend:latest -f backend/Dockerfile ./backend

      - name: Build Docker Image (Frontend)
        if: success()
        run: |
          cd source
          docker build -t cs686-midterm-frontend:latest --build-arg VITE_API_URL=https://best686.site -f cs686-midterm-frontend:latest -f frontend/Dockerfile ./frontend
          # docker build -t cs686-midterm-frontend:latest -f frontend/Dockerfile ./frontend

      - name: Login to Amazon ECR
        if: success()
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com


      - name: Tag and Push Docker Image (Backend)
        if: success()
        run: |
          TIMESTAMP=$(date "+%Y%m%d%H%M%S")
          docker tag cs686-midterm-backend:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cs686-midterm-backend:$TIMESTAMP
          docker tag cs686-midterm-backend:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cs686-midterm-backend:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cs686-midterm-backend:$TIMESTAMP
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cs686-midterm-backend:latest

      - name: Tag and Push Docker Image (Frontend)
        if: success()
        run: |
          TIMESTAMP=$(date "+%Y%m%d%H%M%S")
          docker tag cs686-midterm-frontend:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cs686-midterm-frontend:$TIMESTAMP
          docker tag cs686-midterm-frontend:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cs686-midterm-frontend:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cs686-midterm-frontend:$TIMESTAMP
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cs686-midterm-frontend:latest


      - name: SSH set up and connect to QA EC2
        if: success()
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/qa-machine-key
          chmod 400 ~/.ssh/qa-machine-key
          ssh-keyscan -H ${{ secrets.QA_PUBLIC_IP }} >> ~/.ssh/known_hosts
          echo "SSH key setup complete."

      - name: QA Pull Latest Image and Deploy
        if: success()
        run: |
          ssh -T -o "BatchMode=yes" -o "StrictHostKeyChecking=no" -i ~/.ssh/qa-machine-key ec2-user@${{ secrets.QA_PUBLIC_IP }} << 'EOF'
            set -e  # Exit on error
            echo "SSH connection successful!"

            echo "Setting environment variables..."
            export REACT_APP_API_BASE_URL=https://best686.site

            echo "Checking AWS CLI installation..."
            if ! command -v aws &> /dev/null; then
              echo "Installing AWS CLI..."

              if ! command -v unzip &> /dev/null; then
                echo "Installing unzip..."
                sudo yum update -y
                sudo yum install -y unzip
              fi

              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf awscliv2.zip aws
            else
              echo "‚úÖ AWS CLI already installed."
            fi

            echo "AWS CLI Version:"
            aws --version || echo "‚ùå AWS CLI installation failed!"

            echo "Configuring AWS Credentials..."
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
            export AWS_REGION=${{ env.AWS_REGION }}

            echo "Logging in to AWS ECR..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com || {
              echo "‚ùå AWS ECR login failed!"
              exit 1
            }

            echo "Pulling latest Docker images from ECR..."
            sudo docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cs686-midterm-backend:latest
            sudo docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cs686-midterm-frontend:latest

            echo "Stopping and removing existing containers..."
            sudo docker stop cs686-midterm-backend cs686-midterm-frontend || true
            sudo docker rm cs686-midterm-backend cs686-midterm-frontend || true

            echo "Starting and Deploying new latest containers..."
            sudo docker run -d --name cs686-midterm-backend -p 8800:8800 \
              -e MYSQL_HOST=${{ secrets.RDS_IDENTIFIER }} \
              -e MYSQL_USER=${{ secrets.RDS_USER }} \
              -e MYSQL_PASSWORD=${{ secrets.RDS_PASSWORD }} \
              -e MYSQL_DB=${{ secrets.RDS_DATABASE }} \
              -e PORT=8800 \
              ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cs686-midterm-backend:latest

            sudo docker run -d --name cs686-midterm-frontend -p 5173:5173 \
              -e VITE_API_URL=https://best686.site \
              ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/cs686-midterm-frontend:latest

            echo "‚úÖ Deployment completed successfully!"
          EOF
            